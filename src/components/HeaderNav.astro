---
const { heroImage, showElement } = Astro.props;
import SearchBar from "../components/SearchBar.astro";
---

<header>
  <nav>
    <i class="burgerBtn"></i>
    <div class="burgerMenu hideElement">
      <a href="/about.html">Om os</a>
      <a href="/events.html">Events</a>
      <a href="/productlist.html">Shop</a>
    </div>
    <div class="navLeft hideElement">
      <a href="/about.html">Om os</a>
      <a href="/events.html">Events</a>
    </div>
    <a href="/index.html" class="logoContainer"><img src="/images/logoFull.webp" alt="Logo" /></a>
    <div class="navRight">
      <a href="/productlist.html" class="hideElement">Shop</a>
      <SearchBar />
    </div>
  </nav>
  <img src={heroImage} alt="Hero Image" class={`heroContainer hideElement ${showElement}`} />
</header>

<style>
  /*********    Container Stylings    ***********/
  header {
    width: 100%;
    background-color: var(--color-secondary);
  }
  nav {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    align-items: center;
    max-width: 1440px;
    padding: 0.5rem 2rem;
    gap: var(--space-md);
    margin: 0 auto;
    width: 100%;
    background-color: var(--color-secondary);
    position: relative;
  }
  .heroContainer {
    width: 100%;
  }
  .burgerMenu {
    display: none;
  }
  .burgerMenu.active {
    display: flex;
    flex-direction: column;
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    background-color: var(--color-secondary);
    padding: 1rem;
    gap: var(--space-md);
    border-top: 1px solid var(--color-primary);
    z-index: 500;
    text-align: center;
  }
  .navRight {
    justify-self: end;
  }
  .logoContainer {
    justify-self: center;
  }
  /*********    IMG + SVG Stylings    ***********/
  .logoContainer img {
    max-width: unset;
    width: clamp(8.125rem, 5.625rem + 11.111vw, 15.625rem);
  }
  /*********    Button Stylings    ***********/
  .burgerBtn,
  .burgerBtn.active {
    cursor: pointer;
    justify-self: start;
  }
  .burgerBtn {
    background-image: url("/images/svgs/burgerOpen.svg");
    width: 30px;
    height: 30px;
  }
  .burgerBtn.active {
    background-image: url("/images/svgs/burgerClosed.svg");
    width: 30px;
    height: 30px;
  }
  /*********    Text Stylings    ***********/
  .burgerMenu a,
  .navLeft a,
  .navRight a {
    font-size: var(--fs-base);
    font-weight: bold;
    text-transform: uppercase;
  }
  .burgerMenu a:hover,
  .navLeft a:hover,
  .navRight a:hover {
    transform: scale(1.1);
  }

  .burgerMenu a {
    padding: 0.5rem 0rem;
  }

  @media screen and (min-width: 800px) {
    /*********    Btn Stylings    ***********/
    .burgerBtn {
      display: none;
    }
    /*********    Container Stylings    ***********/
    .navLeft,
    .navRight {
      display: flex;
    }
    /*********    Text Stylings    ***********/
    .navLeft a:not(:last-child),
    .navRight a:not(:last-child) {
      margin-right: 3rem;
    }
    .navLeft a,
    .navRight a {
      font-size: var(--fs-md);
    }
    .navRight a {
      display: initial;
    }
  }
  /*********    Text Stylings    ***********/
</style>

<script defer>
  document.addEventListener("DOMContentLoaded", () => {
    const burgerMenu = document.querySelector(".burgerMenu");
    const burgerBtn = document.querySelector(".burgerBtn");

    burgerBtn.addEventListener("click", burgerClick);
    function burgerClick() {
      burgerBtn.classList.toggle("active");
      burgerMenu.classList.toggle("active");
    }

    // Close burger and headerNav when a menu item is clicked
    burgerMenu.addEventListener("click", burgerMenuClick);
    function burgerMenuClick() {
      burgerBtn.classList.remove("active");
      burgerMenu.classList.remove("active");
    }

    // Reset the burger and headerNav state when resizing to desktop view
    window.addEventListener("resize", () => {
      if (window.innerWidth > 800) {
        burgerBtn.classList.remove("active");
        burgerMenu.classList.remove("active");
      }
    });
    
  });
</script>
